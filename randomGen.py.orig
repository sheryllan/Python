import random as rand
import numpy as np
import unittest as ut
from scipy.stats import chi2
from scipy.stats import norm


class RandomGen(object):
    def __init__(self, nums, prob):
        self._random_nums = nums
        self._probabilities = prob
        if not self._validate_prob():
            raise ValueError('The input probabilities are not valid')
        self._distribution = list(self.running_sum(self._probabilities))
        self._distribution[-1] = 1

    def _validate_prob(self):
        if not np.isclose(sum(self._probabilities), 1, atol=1e-05):
            return False
        if len(self._random_nums) != len(self._probabilities):
            return False
        return True

    def next_num(self):
        uni_rand = rand.random()
        idx = self.binary_search(self._distribution, 0, len(self._distribution) - 1, uni_rand)
        if idx is not None:
            return self._random_nums[idx]
        raise ValueError('The returned index from binary search is {}'.format(idx))

    def running_sum(self, a):
        result = 0
        for i in a:
            result += i
            yield result

    def binary_search(self, arr, start, end, item):
        if start > end or len(arr) == 0:
            return None
        mid = (start + end) / 2
        if item >= arr[mid]:
            return self.binary_search(arr, mid + 1, end, item)
        else:
            if mid == 0 or item >= arr[mid - 1]:
                return mid
            else:
                return self.binary_search(arr, start, mid - 1, item)


class RandomGenTests(ut.TestCase):
    @classmethod
    def setUpClass(cls):
        cls._random_nums = [-1, 0, 1, 2, 3]
        cls._probabilities = [0.01, 0.3, 0.58, 0.1, 0.01]
        cls._expected_value = np.average(cls._random_nums, weights=cls._probabilities)
        cls._variance = np.average([(x - cls._expected_value) ** 2 for x in cls._random_nums],
                                   weights=cls._probabilities)
        cls._gen = RandomGen(cls._random_nums, cls._probabilities)

    def _get_frequencies_of_experiments(self, n):
        frequencies = {x: 0 for x in self._random_nums}
        for i in range(n):
            r = self._gen.next_num()
            frequencies[r] += 1
        return frequencies

    def _get_chi2_test_statistics(self, frequencies, n):
        expected_counts = {x: round(p * n) for x, p in zip(self._random_nums, self._probabilities)}
        c2 = sum([(frequencies[x]) ** 2 / expected_counts[x] for x in self._random_nums]) - n
        return c2

    def _get_experiment_data(self, n):
        return [self._gen.next_num() for _ in range(n)]

    def _get_auto_covariance(self, n, k):
        data = self._get_experiment_data(n)
        r_k = np.mean([(data[i] - self._expected_value) * (data[i + k] - self._expected_value) for i in range(n - k)])
        print(r_k)
<<<<<<< HEAD
        i_mean = np.mean([data[i] for i in range(n - k)])
        ik_mean = np.mean([data[i + k] for i in range(n - k)])
        r_k1 = np.mean([data[i] * data[i + k] for i in range(n - k)]) \
               - self._expected_value * (i_mean + ik_mean) \
               + self._expected_value ** 2
        print(i_mean, ik_mean, r_k1)
=======
        r_k1 = np.mean([float(data[i] * data[i + k]) for i in range(n - k)]) - float(self._expected_value ** 2)
        print(r_k1)
>>>>>>> 0bbdc6c3145933d88e37d74784e76c585a5c2da8
        return r_k

    def _get_confidence_bound(self, alpha, scale):
        cb = norm.ppf(1 - alpha / 2) * scale
        return cb

    def test_uniformity(self):
        alpha = 0.05
        n = 10000
        k = len(self._random_nums)
        c2 = self._get_chi2_test_statistics(self._get_frequencies_of_experiments(n), n)
        quantile = chi2.ppf(1 - alpha, k - 1)
        self.assertTrue(c2 <= quantile)

    def test_independence(self):
        alpha = 0.05
        n = 100
        k = 2
        std = (float(self._variance) / (n - k)) ** (.5)
        auto_cvar = self._get_auto_covariance(n, k)
        conf_bnd = self._get_confidence_bound(alpha, std)
        self.assertTrue((auto_cvar - conf_bnd) * (auto_cvar + conf_bnd) < 0)
<<<<<<< HEAD
=======



>>>>>>> 0bbdc6c3145933d88e37d74784e76c585a5c2da8
